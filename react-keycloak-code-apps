Certainly! I'll create a React application that places all your Node.js apps in a secure Keycloak-protected route and directory. This solution will use React Router for routing, Keycloak for authentication, and a directory structure to organize your Node.js apps. I'll break this down into multiple files to keep each under 300 lines of code.

Let's start with the main App.js file:

jsx

Copy
// App.js
import React from 'react';
import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';
import { ReactKeycloakProvider } from '@react-keycloak/web';
import Keycloak from 'keycloak-js';
import PrivateRoute from './components/PrivateRoute';
import Dashboard from './components/Dashboard';
import NodeAppDirectory from './components/NodeAppDirectory';
import Login from './components/Login';
import Navbar from './components/Navbar';

const keycloakConfig = {
  url: 'https://your-keycloak-url/auth',
  realm: 'your-realm',
  clientId: 'your-client-id'
};

const keycloak = new Keycloak(keycloakConfig);

const App = () => {
  return (
    <ReactKeycloakProvider authClient={keycloak}>
      <Router>
        <Navbar />
        <Switch>
          <Route exact path="/" component={Dashboard} />
          <Route path="/login" component={Login} />
          <PrivateRoute path="/node-apps" component={NodeAppDirectory} />
          <Redirect to="/" />
        </Switch>
      </Router>
    </ReactKeycloakProvider>
  );
};

export default App;
Now, let's create the PrivateRoute component to handle protected routes:

jsx

Copy
// components/PrivateRoute.js
import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import { useKeycloak } from '@react-keycloak/web';

const PrivateRoute = ({ component: Component, ...rest }) => {
  const { keycloak } = useKeycloak();

  return (
    <Route
      {...rest}
      render={(props) =>
        keycloak.authenticated ? (
          <Component {...props} />
        ) : (
          <Redirect
            to={{
              pathname: '/login',
              state: { from: props.location }
            }}
          />
        )
      }
    />
  );
};

export default PrivateRoute;
Next, let's create the NodeAppDirectory component:

jsx

Copy
// components/NodeAppDirectory.js
import React, { useState, useEffect } from 'react';
import { useKeycloak } from '@react-keycloak/web';
import axios from 'axios';

const NodeAppDirectory = () => {
  const [apps, setApps] = useState([]);
  const { keycloak } = useKeycloak();

  useEffect(() => {
    const fetchApps = async () => {
      try {
        const response = await axios.get('https://your-api-url/node-apps', {
          headers: {
            Authorization: `Bearer ${keycloak.token}`
          }
        });
        setApps(response.data);
      } catch (error) {
        console.error('Error fetching Node.js apps:', error);
      }
    };

    fetchApps();
  }, [keycloak.token]);

  return (
    <div className="node-app-directory">
      <h2>Node.js App Directory</h2>
      <ul>
        {apps.map((app) => (
          <li key={app.id}>
            <h3>{app.name}</h3>
            <p>{app.description}</p>
            <a href={app.url} target="_blank" rel="noopener noreferrer">
              Open App
            </a>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default NodeAppDirectory;
Now, let's create the Login component:

jsx

Copy
// components/Login.js
import React from 'react';
import { useKeycloak } from '@react-keycloak/web';
import { Redirect } from 'react-router-dom';

const Login = () => {
  const { keycloak } = useKeycloak();

  if (keycloak.authenticated) {
    return <Redirect to="/node-apps" />;
  }

  return (
    <div className="login">
      <h2>Login</h2>
      <button onClick={() => keycloak.login()}>
        Login with Keycloak
      </button>
    </div>
  );
};

export default Login;
Let's create a simple Dashboard component:

jsx

Copy
// components/Dashboard.js
import React from 'react';
import { Link } from 'react-router-dom';

const Dashboard = () => {
  return (
    <div className="dashboard">
      <h1>Welcome to Your Node.js App Dashboard</h1>
      <p>Access your secure Node.js apps by clicking the button below:</p>
      <Link to="/node-apps">
        <button>View Node.js Apps</button>
      </Link>
    </div>
  );
};

export default Dashboard;
Finally, let's create a Navbar component:

jsx

Copy
// components/Navbar.js
import React from 'react';
import { Link } from 'react-router-dom';
import { useKeycloak } from '@react-keycloak/web';

const Navbar = () => {
  const { keycloak } = useKeycloak();

  return (
    <nav>
      <ul>
        <li><Link to="/">Home</Link></li>
        {keycloak.authenticated ? (
          <>
            <li><Link to="/node-apps">Node.js Apps</Link></li>
            <li><button onClick={() => keycloak.logout()}>Logout</button></li>
          </>
        ) : (
          <li><Link to="/login">Login</Link></li>
        )}
      </ul>
    </nav>
  );
};

export default Navbar;
This React application provides a secure, Keycloak-protected route for your Node.js apps. Here's a summary of what each component does:

App.js: Sets up the main structure, routing, and Keycloak provider.
PrivateRoute.js: Ensures that only authenticated users can access protected routes.
NodeAppDirectory.js: Displays the list of Node.js apps, fetching data from a secure API.
Login.js: Handles user authentication through Keycloak.
Dashboard.js: Provides a simple landing page with a link to the Node.js app directory.
Navbar.js: Offers navigation and login/logout functionality.
To use this code:

Install necessary dependencies: react-router-dom, @react-keycloak/web, keycloak-js, and axios.
Replace 'https://your-keycloak-url/auth', 'your-realm', and 'your-client-id' in App.js with your actual Keycloak configuration.
Update 'https://your-api-url/node-apps' in NodeAppDirectory.js with the actual API endpoint for fetching your Node.js apps.
Implement the backend API to serve the list of Node.js apps securely.
This solution provides a secure, efficient, and well-organized way to access your Node.js apps through a Keycloak-protected React application.

Share




How do I implement the backend API for my Node.js apps?

Can you explain how to configure Keycloak for my application?

What are the best practices for securing my Node.js apps?
